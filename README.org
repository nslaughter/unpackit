#+TITLE: Network Scanning in Go

If you want to start playing and hacking on this then here's an example of how
you can get it running.

You should find that port 80 of nmap's test service is open with. Presently the
program will simply output SYN+ACK and the port.

You'll have to sudo the following commands.

$ go run main.go scanme.nmap.org 80

Now try another port you expect to be closed (telnet?).

$ go run main.go scanme.nmap.org 23

And you should see that you got back an RST response.

* The state of this repo

I now have the pipeline implemented in code for processing responses in 3
goroutines that pass progressively processed data over channels. It's definitely
too much for the current CLI implementation which requires that you specify a
full address in host and port arguments.

Now that I've proved out the methods that I want to start with using gopacket
I'll be adding tests and development methodology.

* Why Port Scanning

Port scanning is about finding out the state of various ports. The process
involves sending packets to ports on a host and categorizing them based on the
response or lack of response.

- Network recon for penetration.

  Network penetration outside of testing is commonly called "Black Hat," but it
  doesn't always deserve such a sinister title. It's simply that it's hostile.
  Think of it more like this...
  1. Patriots volunteer to trespass and kill on sovereign territory and once
     they're enlisted they're acting illegally if they refuse orders to do those
     things.
  2. Sometimes the best defense is a good offense.
  3. None of the foregoing makes it OK to do bad things to innocent people.

- Penetration testing.

  It's like the above except that you're going to be working the results as a
  punch list for remediation instead of exploitation.

- Validating or troubleshooting network configuration.

- Discovering available hosts and services on the network.


* Why Go?

Go's concurrency make it a natural fit for some aspects of network programming.
Think of servers handling multiple connections concurrently or port scanners
where it's more efficient to run the logic of sending packets separate from
receiving.

The standard library offers excellent networking support for a variety of
networked applications in the net package and it's sub-packages. There's also a
low-level library called gopacket that makes packet crafting and analysis
simpler.

* Implementing a TCP Port Scanner with Go's net Package

We'll implement a light and fast method to scan by sending a single-packet, but this
isn't the only way. This is just the default scan (for users with root
priveleges) in the famous nmap utility.

But first we're going to look at how we could do this using the standard
library's connect method. This approach will attempt a full TCP handshake and
either use the success to conclude ports are open, then parse errors to
determine the port state. Timeouts are filtered. Connection refused means the
ports are closed.

** Overview of Connect TCP Scanning

Early methods of TCP port scanning involved using higher level routines that
attempt to form a TCP connection. Go wasn't even a twinkle in Rob Pike's eye
back when that was the predominant approach to port scans. But if Go was a thing
then one of those scanners might have used some code like this...

```
conn, err := net.Dial("tcp", fmt.Printf("scanme.nmap.org:%d", portNo))
```

We would follow that with some code to handle the error like...

```
if err != nil {
    fmt.Printf("%d: %v\n", portNo, err)
    continue
}
```

And for the cases where a connection established we would close it.

```
err = conn.Close()
```

This last bit here involves another part of the protocol where not only will we
be reclaiming local resources we allocated for the connection like file
descriptors, we're going to finish with a sign-off too. This is called a
connection scanner, because it connects with ports that will to determine if
they're open.

It definitely has its drawbacks, but it's also adequate for some purposes.

I ran an implementation on my machine that checked the system ports (that's port
numbers less than 1024) in about a second.

The code will also give us a fine starting point for writing additional methods
later.

NOTE: I'll write some actual code that implements this later. Crafting and
analyzing the packets for a SYN scan was my priority in writing the code.

** The pros and cons of this approach

As you saw from the few lines of code we needed at each step, this method is
simple to implement. The standard library will handle the connection for us with
just a few inputs. As you'll see in a minute there's a lot going on behind the
scenes and this method is convenient in that we don't have to get our hands
dirty.

On the downside this method is a lot less efficient than it could be for all
parties. Opening the connection means we'll tie up low-level resources on each
machine, and then we'll have to close the connection which means another packet.

But none of that is a big deal. What we really care about is that all of this
goes slow and we're stuck parsing connection errors to find out the details of
our scan when we need the packets to see for ourselves.

Let's move on and get the goods.

* A look at SYN scanning

There may have been a time when we would have said that the connection scanning
method wasn't stealthy. That's certainly true, but the method we're about to
walk through by itself is likely to make an equally large impression on any
intrusion detection system.

This will work like the default scan in nmap
(https://nmap.org/book/synscan.html). It's called a SYN scanner, because it
relies on sending the first packet in the TCP connection request. It's a SYN
packet, because it's short for synchronization and includes a sequence number
that starts the connection.

To understand the mechanism of the SYN scanner recall that the TCP connection is
initiated with a 3-way handshake as follows...

1. Caller sends a SYN packet.
2. Recipient responds with SYN, ACK packet.
3. Caller sends an ACK.

At least that's the flow when we send a SYN to an open TCP port. Another
possibility is that the recipient sends RST, ACK. This is a type of
acknowledgement, but tells tells the caller to reset. We interpret this as a
closed port. Yet another possibility is that we get no response. We say this
traffic is filtered and we mean that there's a firewall that won't respond to
traffic that isn't allowed.

Of course we don't know to the highest confidence that non-responsive ports are
filtered. So we may handle that with a retry after a timeout. But at
some point we conclude that the traffic is filtered. Nmap uses statistics
from the ongoing scan to determine an appropriate timeout and sends one
follow-up probe. Then it marks the port filtered if it there's no reply.

The packet types are signified by the control bits in the 13th octet of the TCP
header. Those flags are laid out as follows and numbered here in network order.

|---+---+---+---+---+---+---+---|
| C | E | U | A | P | R | S | F |
|---+---+---+---+---+---+---+---|
| 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
|---+---+---+---+---+---+---+---|

The SYN packet has only the 1 bit set. That is the S bit. Then SYN-ACK has the 1
and 4 set. That is the S and A. Then the ACK sets the 4th place. And the RST,
which is also an ACK will set the 2 and 4.

Here's how Nmap sets the states for their scan report...

|-------------------------------------------------------------+----------------|
| Probe Response                                              | Assigned State |
|-------------------------------------------------------------+----------------|
| TCP SYN/ACK response                                        | open           |
| TCP RST response                                            | closed         |
| No response received (even after retransmissions)           | filtered       |
| ICMP unreachable error (type 3, code 1, 2, 3, 9, 10, or 13) | filtered       |
|-------------------------------------------------------------+----------------|

Our code won't cover all of these options at this time. We'll focus first on
open and close responses.

Now we have a design for a scanner that could be more useful, so long as we can
run it on machine as a priveleged user. It's efficient and doesn't send packets
we don't need and it looks directly at the packets to determine port status.

We're not quite ready to write our code even though we know our approach.
Because we need to cover some detail about how we'll craft our packets in Go.

* Crafting Packets in Go  this code is going to work like a

We're just writing bytes to a network connection, so if we know what to put in
those bytes we can do anything. The trouble is that this would make for writing
lots of code that isn't that interesting. While it's certainly a valuable
exercise, progressing toward a port scanner one octet at a time would be too
tedious for our purposes.

Recall the TCP header...

        0                            15                              31
       -----------------------------------------------------------------
       |          source port          |       destination port        |
       -----------------------------------------------------------------
       |                        sequence number                        |
       -----------------------------------------------------------------
       |                     acknowledgment number                     |
       -----------------------------------------------------------------
       |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |
       -----------------------------------------------------------------
       |         TCP checksum          |       urgent pointer          |
       -----------------------------------------------------------------

And consider moreover that this illustration doesn't include other layers of the
packet. The packets we want to anlyze for TCP are carried within IP packets,
which are carried within Ethernet frames. There's another 32 octets of control
information in the IP header. We won't go into any detail about the ethernet
aspects of our transmission as we won't be dealing with it directly in our code.

For handling all of this detail there's a handy library called gopacket. It
started with a libpcap wrapper in a project originally called gopcap.

** Using gopacket

Ultimately we're going to need functions that write (send) our packets and read
them for analysis. Gopacket can provide us with both.

I've created a struct called Scanner with a method called Probe to send the
packets. It builds an IP layer from our specification of our local IP address
(SrcIP), the destination IP address (DstIP), and the Protocol. We're setting
that from a constant in the gopacket/layers package `layers.IPProtocolTCP`.

The method also provides information that's specific to the TCP packet in the
form of local port (SrcPort), the destination port (DstPort), the sequence
number (Seq), and finally we provide it with the most important bit for a SYN
scanner which is that the SYN bit is set to true. This is 2nd control bit of the
13 octet of the TCP header.

We tell gopacket library to serialize all of this for us, which means to render
a byte array which is what we'll put on the network.

It might seem like a lot to keep track of, but doing all of this is nothing
compared to the program with the behind the scenes work added in. Thankfully we
have that work already done in gopacket.

The Probe method is where you'll find the first use of gopacket. It uses a
connection for packets from the standard library to send a SYN packet.

